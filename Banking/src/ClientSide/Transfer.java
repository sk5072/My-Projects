/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ClientSide;

import java.awt.HeadlessException;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Sunil
 */
public class Transfer extends javax.swing.JFrame {

    /**
     * Creates new form Transfer
     */
    String username,who;
    String senderaccount;
    String receiveraccount;
    String amount;
    public Transfer() {
        initComponents();
    }
    
    public Transfer(String username,String who)
    {
        initComponents();
        this.username=username;
        this.who=who;
        this.user.setText(username);
    }
    
    int setTextofAccount(String acc)
    {
        this.senderaccounttf.setText(acc);
        this.senderaccounttf.disable();
        return 1;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        senderaccounttf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        receiveraccounttf = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        amounttf = new javax.swing.JTextField();
        user = new javax.swing.JLabel();
        back = new javax.swing.JButton();
        transfer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("From");

        senderaccounttf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                senderaccounttfActionPerformed(evt);
            }
        });

        jLabel2.setText("To");

        jLabel3.setText("Amount");

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        transfer.setText("Transfer");
        transfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(receiveraccounttf, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(42, 42, 42)
                        .addComponent(senderaccounttf, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transfer)
                            .addComponent(amounttf, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(139, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(back)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(back))
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(senderaccounttf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(receiveraccounttf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(amounttf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(transfer)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        if(who.equals("employee"))
        {
            this.setVisible(false);
            Employee e=new Employee(username,who);
            e.setVisible(true);
        }
        else
        {
            this.setVisible(false);
            Customer c=new Customer(username,who);
            c.setVisible(true);
        }
    }//GEN-LAST:event_backActionPerformed

    private void transferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferActionPerformed
        // TODO add your handling code here:
        
        senderaccount=senderaccounttf.getText();
        receiveraccount=receiveraccounttf.getText();
        amount=amounttf.getText();
        
        int balance;
        int count1=0;
        int count2=0;
        boolean set=false;
        if(!senderaccount.equals(""))
        {
            if(!receiveraccount.equals(""))
            {
                ClientStub client=new ClientStub();
                try {
                    set = client.stub.checkAccountno(senderaccount);
                } catch (RemoteException ex) {
                    Logger.getLogger(Transfer.class.getName()).log(Level.SEVERE, null, ex);
                }
                if(set==true)
                {
                    try {
                        set = client.stub.checkAccountno(receiveraccount);
                    } catch (RemoteException ex) {
                        Logger.getLogger(Transfer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if(set==true)
                    {
                        if(!senderaccount.equals(receiveraccount))
                        {
                            try 
                            { 
                                balance = client.stub.checkBalance(senderaccount);
                                int withdrawamount=Integer.parseInt(amount);
                                if(withdrawamount>balance)
                                {
                                    JOptionPane.showMessageDialog(this,"You don't have sufficient balance.");
                                }
                                else if(withdrawamount<=0)
                                {
                                    JOptionPane.showMessageDialog(this,"Withdraw amount must be greater than 0.");                               
                                }
                                else
                                {
                                    count1 = client.stub.withdrawBalance(senderaccount,balance-withdrawamount,username,withdrawamount);
                                    balance = client.stub.checkBalance(receiveraccount);
                                    count2 = client.stub.depositBalance(receiveraccount,withdrawamount+balance,username,withdrawamount);
                                }
                                if(count1!=0 && count2!=0)
                                {
                                    JOptionPane.showMessageDialog(this,"Transfered successfully.");                                         
                                    if(who.equals("employee"))
                                    {
                                        this.setVisible(false);
                                        Employee e=new Employee(username,who);
                                        e.setVisible(true);
                                    }
                                    else
                                    {
                                        this.setVisible(false);
                                        Customer c=new Customer(username,who);
                                        c.setVisible(true);
                                    }
                                }
                                else if(count1==0)
                                {
                                    JOptionPane.showMessageDialog(this,"Sending failed.");
                                }
                                else if(count2==0)
                                {
                                    JOptionPane.showMessageDialog(this,"Receiveing failed.");
                                }
                    
                            }  
                            catch (NumberFormatException | HeadlessException | RemoteException e)  
                            { 
                                System.out.println(" at withdraw "+e); 
                                JOptionPane.showMessageDialog(this,"Amount should be in digit.");
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Sender account no and receiver account no is same.");                                                    
                        }

                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Please enter valid receiver account number.");                        
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Please enter valid sender account number.");
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Please enter receiver account number.");                            
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please enter sender account number.");            
        }

//        ClientStub client=new ClientStub();
//        int balance = 0;
//        int input = JOptionPane.showConfirmDialog(null, "Confirm?");
//        if(input==0)
//        {
//            try {
//                balance = client.stub.transferBalance();
//            } catch (RemoteException ex) {
//                Logger.getLogger(Withdraw.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            JOptionPane.showMessageDialog(this,balance);
//        }
    }//GEN-LAST:event_transferActionPerformed

    private void senderaccounttfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_senderaccounttfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_senderaccounttfActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Transfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Transfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Transfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Transfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Transfer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amounttf;
    private javax.swing.JButton back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField receiveraccounttf;
    private javax.swing.JTextField senderaccounttf;
    private javax.swing.JButton transfer;
    private javax.swing.JLabel user;
    // End of variables declaration//GEN-END:variables
}
